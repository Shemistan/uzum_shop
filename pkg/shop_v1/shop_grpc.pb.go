// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: shop.proto

package shop_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopV1Client is the client API for ShopV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopV1Client interface {
	GetProduct(ctx context.Context, in *GetProduct_Request, opts ...grpc.CallOption) (*GetProduct_Response, error)
	GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProducts_Response, error)
	AddProduct(ctx context.Context, in *AddProduct_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBasket(ctx context.Context, in *UpdateBasket_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProduct(ctx context.Context, in *DeleteProduct_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBasket(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBasket_Response, error)
	CreateOrder(ctx context.Context, in *CreateOrder_Request, opts ...grpc.CallOption) (*CreateOrder_Response, error)
	CancelOrder(ctx context.Context, in *CancelOrder_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shopV1Client struct {
	cc grpc.ClientConnInterface
}

func NewShopV1Client(cc grpc.ClientConnInterface) ShopV1Client {
	return &shopV1Client{cc}
}

func (c *shopV1Client) GetProduct(ctx context.Context, in *GetProduct_Request, opts ...grpc.CallOption) (*GetProduct_Response, error) {
	out := new(GetProduct_Response)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProducts_Response, error) {
	out := new(GetProducts_Response)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) AddProduct(ctx context.Context, in *AddProduct_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) UpdateBasket(ctx context.Context, in *UpdateBasket_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/UpdateBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) DeleteProduct(ctx context.Context, in *DeleteProduct_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) GetBasket(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBasket_Response, error) {
	out := new(GetBasket_Response)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/GetBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) CreateOrder(ctx context.Context, in *CreateOrder_Request, opts ...grpc.CallOption) (*CreateOrder_Response, error) {
	out := new(CreateOrder_Response)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) CancelOrder(ctx context.Context, in *CancelOrder_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopV1Client) Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_v1.ShopV1/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopV1Server is the server API for ShopV1 service.
// All implementations must embed UnimplementedShopV1Server
// for forward compatibility
type ShopV1Server interface {
	GetProduct(context.Context, *GetProduct_Request) (*GetProduct_Response, error)
	GetProducts(context.Context, *emptypb.Empty) (*GetProducts_Response, error)
	AddProduct(context.Context, *AddProduct_Request) (*emptypb.Empty, error)
	UpdateBasket(context.Context, *UpdateBasket_Request) (*emptypb.Empty, error)
	DeleteProduct(context.Context, *DeleteProduct_Request) (*emptypb.Empty, error)
	GetBasket(context.Context, *emptypb.Empty) (*GetBasket_Response, error)
	CreateOrder(context.Context, *CreateOrder_Request) (*CreateOrder_Response, error)
	CancelOrder(context.Context, *CancelOrder_Request) (*emptypb.Empty, error)
	Healthz(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedShopV1Server()
}

// UnimplementedShopV1Server must be embedded to have forward compatible implementations.
type UnimplementedShopV1Server struct {
}

func (UnimplementedShopV1Server) GetProduct(context.Context, *GetProduct_Request) (*GetProduct_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopV1Server) GetProducts(context.Context, *emptypb.Empty) (*GetProducts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedShopV1Server) AddProduct(context.Context, *AddProduct_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedShopV1Server) UpdateBasket(context.Context, *UpdateBasket_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasket not implemented")
}
func (UnimplementedShopV1Server) DeleteProduct(context.Context, *DeleteProduct_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedShopV1Server) GetBasket(context.Context, *emptypb.Empty) (*GetBasket_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedShopV1Server) CreateOrder(context.Context, *CreateOrder_Request) (*CreateOrder_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedShopV1Server) CancelOrder(context.Context, *CancelOrder_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedShopV1Server) Healthz(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedShopV1Server) mustEmbedUnimplementedShopV1Server() {}

// UnsafeShopV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopV1Server will
// result in compilation errors.
type UnsafeShopV1Server interface {
	mustEmbedUnimplementedShopV1Server()
}

func RegisterShopV1Server(s grpc.ServiceRegistrar, srv ShopV1Server) {
	s.RegisterService(&ShopV1_ServiceDesc, srv)
}

func _ShopV1_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProduct_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).GetProduct(ctx, req.(*GetProduct_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).GetProducts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProduct_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).AddProduct(ctx, req.(*AddProduct_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_UpdateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasket_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).UpdateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/UpdateBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).UpdateBasket(ctx, req.(*UpdateBasket_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProduct_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).DeleteProduct(ctx, req.(*DeleteProduct_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/GetBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).GetBasket(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrder_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).CreateOrder(ctx, req.(*CreateOrder_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrder_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).CancelOrder(ctx, req.(*CancelOrder_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopV1_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopV1Server).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_v1.ShopV1/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopV1Server).Healthz(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopV1_ServiceDesc is the grpc.ServiceDesc for ShopV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop_v1.ShopV1",
	HandlerType: (*ShopV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ShopV1_GetProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _ShopV1_GetProducts_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ShopV1_AddProduct_Handler,
		},
		{
			MethodName: "UpdateBasket",
			Handler:    _ShopV1_UpdateBasket_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ShopV1_DeleteProduct_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _ShopV1_GetBasket_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ShopV1_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _ShopV1_CancelOrder_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _ShopV1_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop.proto",
}
