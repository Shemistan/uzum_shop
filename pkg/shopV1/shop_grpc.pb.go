// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: internal/protos/shop.proto

package shopV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	GetProduct(ctx context.Context, in *ProductGet_Request, opts ...grpc.CallOption) (*ProductGet_Response, error)
	GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProductsGet_Response, error)
	AddProductToCart(ctx context.Context, in *Cart_UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCart(ctx context.Context, in *Cart_UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cart_GetResponse, error)
	DeleteCart(ctx context.Context, in *Cart_DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateOrder(ctx context.Context, in *Order_CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelOrder(ctx context.Context, in *Order_CancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) GetProduct(ctx context.Context, in *ProductGet_Request, opts ...grpc.CallOption) (*ProductGet_Response, error) {
	out := new(ProductGet_Response)
	err := c.cc.Invoke(ctx, "/shop_service/get_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProductsGet_Response, error) {
	out := new(ProductsGet_Response)
	err := c.cc.Invoke(ctx, "/shop_service/get_products", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) AddProductToCart(ctx context.Context, in *Cart_UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_service/add_product_to_cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) UpdateCart(ctx context.Context, in *Cart_UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_service/update_cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cart_GetResponse, error) {
	out := new(Cart_GetResponse)
	err := c.cc.Invoke(ctx, "/shop_service/get_cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) DeleteCart(ctx context.Context, in *Cart_DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_service/delete_cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CreateOrder(ctx context.Context, in *Order_CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_service/create_order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CancelOrder(ctx context.Context, in *Order_CancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shop_service/cancel_order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility
type ShopServiceServer interface {
	GetProduct(context.Context, *ProductGet_Request) (*ProductGet_Response, error)
	GetProducts(context.Context, *emptypb.Empty) (*ProductsGet_Response, error)
	AddProductToCart(context.Context, *Cart_UpdateRequest) (*emptypb.Empty, error)
	UpdateCart(context.Context, *Cart_UpdateRequest) (*emptypb.Empty, error)
	GetCart(context.Context, *emptypb.Empty) (*Cart_GetResponse, error)
	DeleteCart(context.Context, *Cart_DeleteRequest) (*emptypb.Empty, error)
	CreateOrder(context.Context, *Order_CreateRequest) (*emptypb.Empty, error)
	CancelOrder(context.Context, *Order_CancelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopServiceServer struct {
}

func (UnimplementedShopServiceServer) GetProduct(context.Context, *ProductGet_Request) (*ProductGet_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopServiceServer) GetProducts(context.Context, *emptypb.Empty) (*ProductsGet_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedShopServiceServer) AddProductToCart(context.Context, *Cart_UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedShopServiceServer) UpdateCart(context.Context, *Cart_UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedShopServiceServer) GetCart(context.Context, *emptypb.Empty) (*Cart_GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedShopServiceServer) DeleteCart(context.Context, *Cart_DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedShopServiceServer) CreateOrder(context.Context, *Order_CreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedShopServiceServer) CancelOrder(context.Context, *Order_CancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGet_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/get_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetProduct(ctx, req.(*ProductGet_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/get_products",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetProducts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart_UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/add_product_to_cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).AddProductToCart(ctx, req.(*Cart_UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart_UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/update_cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).UpdateCart(ctx, req.(*Cart_UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/get_cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart_DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/delete_cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).DeleteCart(ctx, req.(*Cart_DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order_CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/create_order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CreateOrder(ctx, req.(*Order_CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order_CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop_service/cancel_order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CancelOrder(ctx, req.(*Order_CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop_service",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_product",
			Handler:    _ShopService_GetProduct_Handler,
		},
		{
			MethodName: "get_products",
			Handler:    _ShopService_GetProducts_Handler,
		},
		{
			MethodName: "add_product_to_cart",
			Handler:    _ShopService_AddProductToCart_Handler,
		},
		{
			MethodName: "update_cart",
			Handler:    _ShopService_UpdateCart_Handler,
		},
		{
			MethodName: "get_cart",
			Handler:    _ShopService_GetCart_Handler,
		},
		{
			MethodName: "delete_cart",
			Handler:    _ShopService_DeleteCart_Handler,
		},
		{
			MethodName: "create_order",
			Handler:    _ShopService_CreateOrder_Handler,
		},
		{
			MethodName: "cancel_order",
			Handler:    _ShopService_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/shop.proto",
}
