// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const CancelOrder = `-- name: CancelOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) CancelOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.cancelOrderStmt, CancelOrder, id)
	return err
}

const CreateOrder = `-- name: CreateOrder :exec
INSERT INTO orders(user_id, baskets_id, address, address_location_x, address_location_y, pick_up_location_x, pick_up_location_y, metadata, total_price)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateOrderParams struct {
	UserID           uuid.UUID
	BasketsID        []uuid.UUID
	Address          string
	AddressLocationX float64
	AddressLocationY float64
	PickUpLocationX  float64
	PickUpLocationY  float64
	Metadata         string
	TotalPrice       float64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.exec(ctx, q.createOrderStmt, CreateOrder,
		arg.UserID,
		pq.Array(arg.BasketsID),
		arg.Address,
		arg.AddressLocationX,
		arg.AddressLocationY,
		arg.PickUpLocationX,
		arg.PickUpLocationY,
		arg.Metadata,
		arg.TotalPrice,
	)
	return err
}

const GetOrderOwner = `-- name: GetOrderOwner :one
SELECT user_id
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderOwner(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getOrderOwnerStmt, GetOrderOwner, id)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
