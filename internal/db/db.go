// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addBasketItemStmt, err = db.PrepareContext(ctx, AddBasketItem); err != nil {
		return nil, fmt.Errorf("error preparing query AddBasketItem: %w", err)
	}
	if q.cancelOrderStmt, err = db.PrepareContext(ctx, CancelOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CancelOrder: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, CreateOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.deleteBasketItemStmt, err = db.PrepareContext(ctx, DeleteBasketItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBasketItem: %w", err)
	}
	if q.getOrderOwnerStmt, err = db.PrepareContext(ctx, GetOrderOwner); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderOwner: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, GetProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.getProductPriceStmt, err = db.PrepareContext(ctx, GetProductPrice); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductPrice: %w", err)
	}
	if q.getProductsStmt, err = db.PrepareContext(ctx, GetProducts); err != nil {
		return nil, fmt.Errorf("error preparing query GetProducts: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, GetUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, UpdateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addBasketItemStmt != nil {
		if cerr := q.addBasketItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addBasketItemStmt: %w", cerr)
		}
	}
	if q.cancelOrderStmt != nil {
		if cerr := q.cancelOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cancelOrderStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.deleteBasketItemStmt != nil {
		if cerr := q.deleteBasketItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBasketItemStmt: %w", cerr)
		}
	}
	if q.getOrderOwnerStmt != nil {
		if cerr := q.getOrderOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderOwnerStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.getProductPriceStmt != nil {
		if cerr := q.getProductPriceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductPriceStmt: %w", cerr)
		}
	}
	if q.getProductsStmt != nil {
		if cerr := q.getProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	addBasketItemStmt    *sql.Stmt
	cancelOrderStmt      *sql.Stmt
	createOrderStmt      *sql.Stmt
	deleteBasketItemStmt *sql.Stmt
	getOrderOwnerStmt    *sql.Stmt
	getProductStmt       *sql.Stmt
	getProductPriceStmt  *sql.Stmt
	getProductsStmt      *sql.Stmt
	getUserStmt          *sql.Stmt
	updateProductStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		addBasketItemStmt:    q.addBasketItemStmt,
		cancelOrderStmt:      q.cancelOrderStmt,
		createOrderStmt:      q.createOrderStmt,
		deleteBasketItemStmt: q.deleteBasketItemStmt,
		getOrderOwnerStmt:    q.getOrderOwnerStmt,
		getProductStmt:       q.getProductStmt,
		getProductPriceStmt:  q.getProductPriceStmt,
		getProductsStmt:      q.getProductsStmt,
		getUserStmt:          q.getUserStmt,
		updateProductStmt:    q.updateProductStmt,
	}
}
