// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: product.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const GetProduct = `-- name: GetProduct :one
SELECT id, name, description, price, quantity FROM Products pr
WHERE pr.id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.queryRow(ctx, q.getProductStmt, GetProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const GetProductPrice = `-- name: GetProductPrice :one
SELECT pr.price FROM Products pr
WHERE pr.id = $1
`

func (q *Queries) GetProductPrice(ctx context.Context, id uuid.UUID) (sql.NullFloat64, error) {
	row := q.queryRow(ctx, q.getProductPriceStmt, GetProductPrice, id)
	var price sql.NullFloat64
	err := row.Scan(&price)
	return price, err
}

const GetProducts = `-- name: GetProducts :many
SELECT id, name, description, price, quantity FROM Products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.getProductsStmt, GetProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :exec
UPDATE Products
SET quantity = $1
WHERE id = $2
`

type UpdateProductParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.exec(ctx, q.updateProductStmt, UpdateProduct, arg.Quantity, arg.ID)
	return err
}
